"""autogenerated by genpy from dhs/person.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class person(genpy.Message):
  _md5sum = "b1c29f70675460405e64a004cc34ba02"
  _type = "dhs/person"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 upper_red
uint8 upper_green
uint8 upper_blue
uint8 lower_red
uint8 lower_green
uint8 lower_blue


"""
  __slots__ = ['upper_red','upper_green','upper_blue','lower_red','lower_green','lower_blue']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       upper_red,upper_green,upper_blue,lower_red,lower_green,lower_blue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(person, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.upper_red is None:
        self.upper_red = 0
      if self.upper_green is None:
        self.upper_green = 0
      if self.upper_blue is None:
        self.upper_blue = 0
      if self.lower_red is None:
        self.lower_red = 0
      if self.lower_green is None:
        self.lower_green = 0
      if self.lower_blue is None:
        self.lower_blue = 0
    else:
      self.upper_red = 0
      self.upper_green = 0
      self.upper_blue = 0
      self.lower_red = 0
      self.lower_green = 0
      self.lower_blue = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.upper_red, _x.upper_green, _x.upper_blue, _x.lower_red, _x.lower_green, _x.lower_blue))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.upper_red, _x.upper_green, _x.upper_blue, _x.lower_red, _x.lower_green, _x.lower_blue,) = _struct_6B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.upper_red, _x.upper_green, _x.upper_blue, _x.lower_red, _x.lower_green, _x.lower_blue))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.upper_red, _x.upper_green, _x.upper_blue, _x.lower_red, _x.lower_green, _x.lower_blue,) = _struct_6B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B = struct.Struct("<6B")
